name: Deploy Docs to Github Pages

on:
  release:
    types:
      - "published"
  push:
    branches:
      - main
      - beta
    paths:
      - docs
      - mkdocs.yml
      - poetry.lock
      - pyproject.toml

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    name: Build Docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.0
        
      - uses: actions/setup-python@v4.8.0
        id: setup-python
        with:
          python-version: "3.10"

      - uses: snok/install-poetry@v1.3.4
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      # I'm using only one version of   ython,
      # I don't need to track it in Poetry cache.
      - id: cached-poetry-deps
        uses: actions/cache@v3.3.2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      
      - if: steps.cached-poetry-deps.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - run: poetry run python -m mkdocs build
        
      - uses: actions/upload-pages-artifact@v2.0.0
        with:
          path: ./site
  
  define_group:
    name: Define group concurreny
    runs-on: ubuntu-latest
    outputs:
      group: ${{ steps.group.outputs.group }}
    steps:
      - name: Get if the next concurrency group
        id: group
        run: |
          if [ ${{ github.event.prerelease }} = true ]; then
              GROUP="prerelease"
          else
              GROUP=""
          fi
          echo "group=$GROUP" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy Pages
    concurrency:
      group: pages-${{ needs.define_group.outputs.group }}
      cancel-in-progress: true
    environment:
      name: github-pages-${{ needs.define_group.outputs.group }}
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs:
      - build
      - define_group
    steps:
      - id: deployment
        uses: actions/deploy-pages@v3
